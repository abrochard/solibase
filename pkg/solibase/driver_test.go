// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package solibase

import (
	"sync"
)

var (
	lockDriverMockAddFlags                        sync.RWMutex
	lockDriverMockConditionApply                  sync.RWMutex
	lockDriverMockConnect                         sync.RWMutex
	lockDriverMockCreateChangelogTableIfNotExists sync.RWMutex
	lockDriverMockExec                            sync.RWMutex
	lockDriverMockLastChangeSet                   sync.RWMutex
	lockDriverMockSaveChangeSet                   sync.RWMutex
	lockDriverMockSaveRollback                    sync.RWMutex
)

// DriverMock is a mock implementation of Driver.
//
//     func TestSomethingThatUsesDriver(t *testing.T) {
//
//         // make and configure a mocked Driver
//         mockedDriver := &DriverMock{
//             AddFlagsFunc: func(fs FlagSet)  {
// 	               panic("mock out the AddFlags method")
//             },
//             ConditionApplyFunc: func(query string) (bool, error) {
// 	               panic("mock out the ConditionApply method")
//             },
//             ConnectFunc: func() error {
// 	               panic("mock out the Connect method")
//             },
//             CreateChangelogTableIfNotExistsFunc: func() error {
// 	               panic("mock out the CreateChangelogTableIfNotExists method")
//             },
//             ExecFunc: func(query string) error {
// 	               panic("mock out the Exec method")
//             },
//             LastChangeSetFunc: func() (string, string, error) {
// 	               panic("mock out the LastChangeSet method")
//             },
//             SaveChangeSetFunc: func(name string, metadata string, hash string) error {
// 	               panic("mock out the SaveChangeSet method")
//             },
//             SaveRollbackFunc: func(name string, hash string) error {
// 	               panic("mock out the SaveRollback method")
//             },
//         }
//
//         // use mockedDriver in code that requires Driver
//         // and then make assertions.
//
//     }
type DriverMock struct {
	// AddFlagsFunc mocks the AddFlags method.
	AddFlagsFunc func(fs FlagSet)

	// ConditionApplyFunc mocks the ConditionApply method.
	ConditionApplyFunc func(query string) (bool, error)

	// ConnectFunc mocks the Connect method.
	ConnectFunc func() error

	// CreateChangelogTableIfNotExistsFunc mocks the CreateChangelogTableIfNotExists method.
	CreateChangelogTableIfNotExistsFunc func() error

	// ExecFunc mocks the Exec method.
	ExecFunc func(query string) error

	// LastChangeSetFunc mocks the LastChangeSet method.
	LastChangeSetFunc func() (string, string, error)

	// SaveChangeSetFunc mocks the SaveChangeSet method.
	SaveChangeSetFunc func(name string, metadata string, hash string) error

	// SaveRollbackFunc mocks the SaveRollback method.
	SaveRollbackFunc func(name string, hash string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddFlags holds details about calls to the AddFlags method.
		AddFlags []struct {
			// Fs is the fs argument value.
			Fs FlagSet
		}
		// ConditionApply holds details about calls to the ConditionApply method.
		ConditionApply []struct {
			// Query is the query argument value.
			Query string
		}
		// Connect holds details about calls to the Connect method.
		Connect []struct {
		}
		// CreateChangelogTableIfNotExists holds details about calls to the CreateChangelogTableIfNotExists method.
		CreateChangelogTableIfNotExists []struct {
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Query is the query argument value.
			Query string
		}
		// LastChangeSet holds details about calls to the LastChangeSet method.
		LastChangeSet []struct {
		}
		// SaveChangeSet holds details about calls to the SaveChangeSet method.
		SaveChangeSet []struct {
			// Name is the name argument value.
			Name string
			// Metadata is the metadata argument value.
			Metadata string
			// Hash is the hash argument value.
			Hash string
		}
		// SaveRollback holds details about calls to the SaveRollback method.
		SaveRollback []struct {
			// Name is the name argument value.
			Name string
			// Hash is the hash argument value.
			Hash string
		}
	}
}

// AddFlags calls AddFlagsFunc.
func (mock *DriverMock) AddFlags(fs FlagSet) {
	if mock.AddFlagsFunc == nil {
		panic("DriverMock.AddFlagsFunc: method is nil but Driver.AddFlags was just called")
	}
	callInfo := struct {
		Fs FlagSet
	}{
		Fs: fs,
	}
	lockDriverMockAddFlags.Lock()
	mock.calls.AddFlags = append(mock.calls.AddFlags, callInfo)
	lockDriverMockAddFlags.Unlock()
	mock.AddFlagsFunc(fs)
}

// AddFlagsCalls gets all the calls that were made to AddFlags.
// Check the length with:
//     len(mockedDriver.AddFlagsCalls())
func (mock *DriverMock) AddFlagsCalls() []struct {
	Fs FlagSet
} {
	var calls []struct {
		Fs FlagSet
	}
	lockDriverMockAddFlags.RLock()
	calls = mock.calls.AddFlags
	lockDriverMockAddFlags.RUnlock()
	return calls
}

// ConditionApply calls ConditionApplyFunc.
func (mock *DriverMock) ConditionApply(query string) (bool, error) {
	if mock.ConditionApplyFunc == nil {
		panic("DriverMock.ConditionApplyFunc: method is nil but Driver.ConditionApply was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	lockDriverMockConditionApply.Lock()
	mock.calls.ConditionApply = append(mock.calls.ConditionApply, callInfo)
	lockDriverMockConditionApply.Unlock()
	return mock.ConditionApplyFunc(query)
}

// ConditionApplyCalls gets all the calls that were made to ConditionApply.
// Check the length with:
//     len(mockedDriver.ConditionApplyCalls())
func (mock *DriverMock) ConditionApplyCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	lockDriverMockConditionApply.RLock()
	calls = mock.calls.ConditionApply
	lockDriverMockConditionApply.RUnlock()
	return calls
}

// Connect calls ConnectFunc.
func (mock *DriverMock) Connect() error {
	if mock.ConnectFunc == nil {
		panic("DriverMock.ConnectFunc: method is nil but Driver.Connect was just called")
	}
	callInfo := struct {
	}{}
	lockDriverMockConnect.Lock()
	mock.calls.Connect = append(mock.calls.Connect, callInfo)
	lockDriverMockConnect.Unlock()
	return mock.ConnectFunc()
}

// ConnectCalls gets all the calls that were made to Connect.
// Check the length with:
//     len(mockedDriver.ConnectCalls())
func (mock *DriverMock) ConnectCalls() []struct {
} {
	var calls []struct {
	}
	lockDriverMockConnect.RLock()
	calls = mock.calls.Connect
	lockDriverMockConnect.RUnlock()
	return calls
}

// CreateChangelogTableIfNotExists calls CreateChangelogTableIfNotExistsFunc.
func (mock *DriverMock) CreateChangelogTableIfNotExists() error {
	if mock.CreateChangelogTableIfNotExistsFunc == nil {
		panic("DriverMock.CreateChangelogTableIfNotExistsFunc: method is nil but Driver.CreateChangelogTableIfNotExists was just called")
	}
	callInfo := struct {
	}{}
	lockDriverMockCreateChangelogTableIfNotExists.Lock()
	mock.calls.CreateChangelogTableIfNotExists = append(mock.calls.CreateChangelogTableIfNotExists, callInfo)
	lockDriverMockCreateChangelogTableIfNotExists.Unlock()
	return mock.CreateChangelogTableIfNotExistsFunc()
}

// CreateChangelogTableIfNotExistsCalls gets all the calls that were made to CreateChangelogTableIfNotExists.
// Check the length with:
//     len(mockedDriver.CreateChangelogTableIfNotExistsCalls())
func (mock *DriverMock) CreateChangelogTableIfNotExistsCalls() []struct {
} {
	var calls []struct {
	}
	lockDriverMockCreateChangelogTableIfNotExists.RLock()
	calls = mock.calls.CreateChangelogTableIfNotExists
	lockDriverMockCreateChangelogTableIfNotExists.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *DriverMock) Exec(query string) error {
	if mock.ExecFunc == nil {
		panic("DriverMock.ExecFunc: method is nil but Driver.Exec was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	lockDriverMockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	lockDriverMockExec.Unlock()
	return mock.ExecFunc(query)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//     len(mockedDriver.ExecCalls())
func (mock *DriverMock) ExecCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	lockDriverMockExec.RLock()
	calls = mock.calls.Exec
	lockDriverMockExec.RUnlock()
	return calls
}

// LastChangeSet calls LastChangeSetFunc.
func (mock *DriverMock) LastChangeSet() (string, string, error) {
	if mock.LastChangeSetFunc == nil {
		panic("DriverMock.LastChangeSetFunc: method is nil but Driver.LastChangeSet was just called")
	}
	callInfo := struct {
	}{}
	lockDriverMockLastChangeSet.Lock()
	mock.calls.LastChangeSet = append(mock.calls.LastChangeSet, callInfo)
	lockDriverMockLastChangeSet.Unlock()
	return mock.LastChangeSetFunc()
}

// LastChangeSetCalls gets all the calls that were made to LastChangeSet.
// Check the length with:
//     len(mockedDriver.LastChangeSetCalls())
func (mock *DriverMock) LastChangeSetCalls() []struct {
} {
	var calls []struct {
	}
	lockDriverMockLastChangeSet.RLock()
	calls = mock.calls.LastChangeSet
	lockDriverMockLastChangeSet.RUnlock()
	return calls
}

// SaveChangeSet calls SaveChangeSetFunc.
func (mock *DriverMock) SaveChangeSet(name string, metadata string, hash string) error {
	if mock.SaveChangeSetFunc == nil {
		panic("DriverMock.SaveChangeSetFunc: method is nil but Driver.SaveChangeSet was just called")
	}
	callInfo := struct {
		Name     string
		Metadata string
		Hash     string
	}{
		Name:     name,
		Metadata: metadata,
		Hash:     hash,
	}
	lockDriverMockSaveChangeSet.Lock()
	mock.calls.SaveChangeSet = append(mock.calls.SaveChangeSet, callInfo)
	lockDriverMockSaveChangeSet.Unlock()
	return mock.SaveChangeSetFunc(name, metadata, hash)
}

// SaveChangeSetCalls gets all the calls that were made to SaveChangeSet.
// Check the length with:
//     len(mockedDriver.SaveChangeSetCalls())
func (mock *DriverMock) SaveChangeSetCalls() []struct {
	Name     string
	Metadata string
	Hash     string
} {
	var calls []struct {
		Name     string
		Metadata string
		Hash     string
	}
	lockDriverMockSaveChangeSet.RLock()
	calls = mock.calls.SaveChangeSet
	lockDriverMockSaveChangeSet.RUnlock()
	return calls
}

// SaveRollback calls SaveRollbackFunc.
func (mock *DriverMock) SaveRollback(name string, hash string) error {
	if mock.SaveRollbackFunc == nil {
		panic("DriverMock.SaveRollbackFunc: method is nil but Driver.SaveRollback was just called")
	}
	callInfo := struct {
		Name string
		Hash string
	}{
		Name: name,
		Hash: hash,
	}
	lockDriverMockSaveRollback.Lock()
	mock.calls.SaveRollback = append(mock.calls.SaveRollback, callInfo)
	lockDriverMockSaveRollback.Unlock()
	return mock.SaveRollbackFunc(name, hash)
}

// SaveRollbackCalls gets all the calls that were made to SaveRollback.
// Check the length with:
//     len(mockedDriver.SaveRollbackCalls())
func (mock *DriverMock) SaveRollbackCalls() []struct {
	Name string
	Hash string
} {
	var calls []struct {
		Name string
		Hash string
	}
	lockDriverMockSaveRollback.RLock()
	calls = mock.calls.SaveRollback
	lockDriverMockSaveRollback.RUnlock()
	return calls
}
